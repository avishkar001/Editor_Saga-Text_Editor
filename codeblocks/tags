!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	data_structure.c	6;"	d	file:
BUFFER_SIZE	data_structure.h	4;"	d
DATA_STRUCTURE_H_INCLUDED	data_structure.h	2;"	d
DEFAULT_GAP_SIZE	data_structure.c	8;"	d	file:
DEFAULT_GAP_SIZE	data_structure.h	6;"	d
FUNCTION_H_INCLUDED	function.h	2;"	d
GAP_BUFFER_H_INCLUDED	gap_buffer.h	2;"	d
GUI_H_INCLUDED	gui.h	2;"	d
NODES_SIZE	data_structure.c	7;"	d	file:
NODES_SIZE	data_structure.h	5;"	d
WINDOWS	data_structure.c	9;"	d	file:
WINDOWS	data_structure.h	7;"	d
append_in_line	data_structure.c	/^void append_in_line(line *l, lines_node *new){$/;"	f
arr	data_structure.h	/^    char* arr;$/;"	m	struct:lines_node
backspace	function.c	/^void backspace(buffer *b, int line_no, int position){$/;"	f
buffer	data_structure.h	/^typedef struct buffer{$/;"	s
buffer	data_structure.h	/^}buffer;$/;"	t	typeref:struct:buffer
destroy_line	data_structure.c	/^void destroy_line(line* l){$/;"	f
fnext	data_structure.h	/^    FILE *fptr, *fprev, *fnext;$/;"	m	struct:buffer
fprev	data_structure.h	/^    FILE *fptr, *fprev, *fnext;$/;"	m	struct:buffer
fptr	data_structure.h	/^    FILE *fptr, *fprev, *fnext;$/;"	m	struct:buffer
gap_left	data_structure.h	/^    int gap_left,gap_right, gap_size;$/;"	m	struct:lines_node
gap_right	data_structure.h	/^    int gap_left,gap_right, gap_size;$/;"	m	struct:lines_node
gap_size	data_structure.h	/^    int gap_left,gap_right, gap_size;$/;"	m	struct:lines_node
head	data_structure.h	/^    lines_node* head;$/;"	m	struct:line
head_array	data_structure.h	/^    line *head_array;$/;"	m	struct:buffer
head_index	data_structure.h	/^    int head_index;$/;"	m	struct:buffer
init_buffer	data_structure.c	/^void init_buffer(buffer *b, int size, char* filename){$/;"	f
init_line	data_structure.c	/^void init_line(line* l){$/;"	f
init_lines_node	data_structure.c	/^void init_lines_node(lines_node* l){$/;"	f
insert_character	function.c	/^void insert_character(line *l, int position, char data){$/;"	f
insert_in_line	data_structure.c	/^void insert_in_line(line *l, char* arr, int len){$/;"	f
left	gap_buffer.c	/^void left(lines_node* node, int position){$/;"	f
line	data_structure.h	/^typedef struct line{$/;"	s
line	data_structure.h	/^} line;$/;"	t	typeref:struct:line
line_size	data_structure.h	/^    int line_size;$/;"	m	struct:line
lines_node	data_structure.h	/^typedef struct lines_node{$/;"	s
lines_node	data_structure.h	/^}lines_node;$/;"	t	typeref:struct:lines_node
load_fullnode	data_structure.c	/^void load_fullnode(lines_node* l){$/;"	f
load_next_line	function.c	/^void load_next_line(buffer *b){$/;"	f
load_prev_line	function.c	/^void load_prev_line(buffer *b){$/;"	f
main	main.c	/^int main(int argc, char **argv){$/;"	f
move_cursor	gap_buffer.c	/^lines_node* move_cursor(lines_node* node, int position){$/;"	f
next	data_structure.h	/^    struct lines_node *next;$/;"	m	struct:lines_node	typeref:struct:lines_node::lines_node
print_buffer	data_structure.c	/^void print_buffer(buffer b){$/;"	f
print_line	data_structure.c	/^void print_line(line l){$/;"	f
print_line_ncurses	gui.c	/^void print_line_ncurses(line l, int line_num){$/;"	f
print_loc	gui.c	/^void print_loc(int x, int y){$/;"	f
print_node	data_structure.c	/^void print_node(lines_node node){$/;"	f
print_page_ncurses	gui.c	/^void print_page_ncurses(buffer b){$/;"	f
read_file_firsttime	function.c	/^void read_file_firsttime(buffer* b){$/;"	f
right	gap_buffer.c	/^void right(lines_node* node, int position){$/;"	f
set_line_size	data_structure.c	/^void set_line_size(line* l){$/;"	f
size	data_structure.h	/^    int size;$/;"	m	struct:buffer
write_buffer	data_structure.c	/^void write_buffer(FILE* f, buffer b){$/;"	f
write_line	data_structure.c	/^void write_line(FILE* f, line l){$/;"	f
write_node	data_structure.c	/^void write_node(FILE *f, lines_node node){$/;"	f
